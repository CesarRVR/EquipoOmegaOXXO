log_dist_cerca +     # transformación
log_dist_se    +     # transformación
num_escuelas +
num_abarrotes +
num_super +
num_farmacia +
num_oficina +
num_establecimientos +
num_gasolinera,
data = df2_trans
)
# 3) Salida clásica con asteriscos de significancia
summary(fit_trans)
# 4) Matriz de correlación de las variables numéricas transformadas
numeric_vars <- df2_trans %>%
select(where(is.numeric)) %>%
select(-venta_promedio)
M <- cor(numeric_vars, use = "pairwise.complete.obs")
ggcorrplot(M, lab = TRUE)
```{r anova_quad_cuberoot, message=FALSE, warning=FALSE}
library(dplyr)
library(broom)
library(ggcorrplot)
# 1) Preparamos df2 con las transformaciones cuadrática y raíz cúbica
df2_trans2 <- df %>%
rename_all(tolower) %>%
mutate(
across(where(is.character), as.factor),
quad_dist_cerca = dist_cerca^2,
cr_dist_cerca   = dist_cerca^(1/3),
quad_dist_se    = dist_se^2,
cr_dist_se      = dist_se^(1/3)
) %>%
select(-tienda_id, -latitud_num, -longitud_num)
# 2) ANOVA incluyendo las nuevas transformaciones
fit2 <- aov(
venta_promedio ~
nivelsocioeconomico_des +
entorno_des +
segmento_maestro_desc +
lid_ubicacion_tienda +
plaza_cve +
mts2ventas_num +
puertasrefrig_num +
cajonesestacionamiento_num +
porcentaje_cumplimiento +
quad_dist_cerca +
cr_dist_cerca +
quad_dist_se +
cr_dist_se +
num_escuelas +
num_abarrotes +
num_super +
num_farmacia +
num_oficina +
num_establecimientos +
num_gasolinera,
data = df2_trans2
)
# 3) Resultado ordenado de menor a mayor p-valor (excluyendo intercepto)
broom::tidy(fit2) %>%
filter(term != "(Intercept)") %>%
arrange(p.value) %>%
print()
# 4) Matriz de correlación de las variables numéricas transformadas
numeric_vars2 <- df2_trans2 %>%
select(where(is.numeric)) %>%
select(-venta_promedio)
M2 <- cor(numeric_vars2, use = "pairwise.complete.obs")
ggcorrplot(M2, lab = TRUE)
```{r anova_quad_cuberoot, message=FALSE, warning=FALSE}
library(dplyr)
library(broom)
library(ggcorrplot)
# 1) Preparamos df2 con las transformaciones cuadrática y raíz cúbica
df2_trans2 <- df %>%
rename_all(tolower) %>%
mutate(
across(where(is.character), as.factor),
quad_dist_cerca = dist_cerca^2,
cr_dist_cerca   = dist_cerca^(1/3),
quad_dist_se    = dist_se^2,
cr_dist_se      = dist_se^(1/3)
) %>%
select(-tienda_id, -latitud_num, -longitud_num)
# 2) ANOVA incluyendo las nuevas transformaciones
fit2 <- aov(
venta_promedio ~
nivelsocioeconomico_des +
entorno_des +
segmento_maestro_desc +
lid_ubicacion_tienda +
plaza_cve +
mts2ventas_num +
puertasrefrig_num +
cajonesestacionamiento_num +
porcentaje_cumplimiento +
quad_dist_cerca +
cr_dist_cerca +
quad_dist_se +
cr_dist_se +
num_escuelas +
num_abarrotes +
num_super +
num_farmacia +
num_oficina +
num_establecimientos +
num_gasolinera,
data = df2_trans2
)
# 3) Resultado ordenado de menor a mayor p-valor (excluyendo intercepto)
broom::tidy(fit2) %>%
filter(term != "(Intercept)") %>%
arrange(p.value) %>%
print()
# 4) Matriz de correlación de las variables numéricas transformadas
numeric_vars2 <- df2_trans2 %>%
select(where(is.numeric)) %>%
select(-venta_promedio)
M2 <- cor(numeric_vars2, use = "pairwise.complete.obs")
ggcorrplot(M2, lab = TRUE)
library(ggcorrplot)
# Preparamos df2 con las transformaciones
df2_trans <- df %>%
rename_all(tolower) %>%
mutate(
across(where(is.character), as.factor),
# Transformaciones:
log_dist_cerca = log1p(dist_cerca),
log_dist_se    = log1p(dist_se)
) %>%
select(-tienda_id, -latitud_num, -longitud_num)
# ANOVA incluyendo las variables transformadas en lugar de las originales
fit_trans <- aov(
venta_promedio ~
nivelsocioeconomico_des +
entorno_des +
segmento_maestro_desc +
lid_ubicacion_tienda +
plaza_cve +
mts2ventas_num +
puertasrefrig_num +
cajonesestacionamiento_num +
porcentaje_cumplimiento +
log_dist_cerca +     # uso de la transformación
dist_se  +
num_escuelas +
num_abarrotes +
num_super +
num_farmacia +
num_oficina +
num_establecimientos +
num_gasolinera,
data = df2_trans
)
# Mostrar resultados ordenados por p-valor ascendente
tab <- broom::tidy(fit_trans) %>%
filter(term != "(Intercept)") %>%
arrange(p.value)
print(tab)
# Matriz de correlación numérica (ahora con log_dist_cerca y log_dist_se)
numeric_vars <- df2_trans %>%
select(where(is.numeric)) %>%
select(-venta_promedio)  # si no queremos correlar la respuesta
M <- cor(numeric_vars, use="pairwise.complete.obs")
ggcorrplot(M, lab=TRUE)
library(dplyr)
library(broom)
library(ggcorrplot)
# Preparamos df2: caracteres → factors, creamos log_dist_cerca, mantenemos dist_se tal cual
df2_trans <- df %>%
rename_all(tolower) %>%
mutate(
across(where(is.character), as.factor),
log_dist_cerca = log1p(dist_cerca)
) %>%
select(-tienda_id, -latitud_num, -longitud_num)
# ANOVA incluyendo log_dist_cerca y dist_se sin transformar
fit_trans <- aov(
venta_promedio ~
nivelsocioeconomico_des +
entorno_des +
segmento_maestro_desc +
lid_ubicacion_tienda +
plaza_cve +
mts2ventas_num +
puertasrefrig_num +
cajonesestacionamiento_num +
porcentaje_cumplimiento +
log_dist_cerca +  # transformada
dist_se         +  # sin transformar
num_escuelas +
num_abarrotes +
num_super +
num_farmacia +
num_oficina +
num_establecimientos +
num_gasolinera,
data = df2_trans
)
# 1) ANOVA ordenado por p-valor ascendente (sin intercepto)
tidy(fit_trans) %>%
filter(term != "(Intercept)") %>%
arrange(p.value) %>%
print()
# 2) Matriz de correlación numérica (incluye log_dist_cerca y dist_se)
numeric_vars <- df2_trans %>%
select(where(is.numeric)) %>%
select(-venta_promedio)
M <- cor(numeric_vars, use="pairwise.complete.obs")
ggcorrplot(M, lab = TRUE)
library(dplyr)
library(ggcorrplot)
# Preparamos df2: convertimos caracteres a factores, creamos log_dist_cerca y conservamos dist_se
df2_trans <- df %>%
rename_all(tolower) %>%
mutate(
across(where(is.character), as.factor),
log_dist_cerca = log1p(dist_cerca)
) %>%
select(-tienda_id, -latitud_num, -longitud_num)
# Ajustamos el modelo ANOVA
fit_trans <- aov(
venta_promedio ~
nivelsocioeconomico_des +
entorno_des +
segmento_maestro_desc +
lid_ubicacion_tienda +
plaza_cve +
mts2ventas_num +
puertasrefrig_num +
cajonesestacionamiento_num +
porcentaje_cumplimiento +
log_dist_cerca +  # transformada
dist_se         +  # sin transformar
num_escuelas +
num_abarrotes +
num_super +
num_farmacia +
num_oficina +
num_establecimientos +
num_gasolinera,
data = df2_trans
)
# Mostramos el output tradicional de ANOVA
summary(fit_trans)
# Matriz de correlación numérica (incluye log_dist_cerca y dist_se)
numeric_vars <- df2_trans %>%
select(where(is.numeric)) %>%
select(-venta_promedio)
M <- cor(numeric_vars, use = "pairwise.complete.obs")
ggcorrplot(M, lab = TRUE)
# Carga de librerías
library(dplyr)
library(ggcorrplot)
library(MASS)
# 1. Preparación de datos: factores y transformaciones logarítmicas
df2_trans <- df %>%
rename_all(tolower) %>%
mutate(
across(where(is.character), as.factor),
log_venta_promedio = log1p(venta_promedio),
log_dist_cerca    = log1p(dist_cerca)
) %>%
select(-tienda_id, -latitud_num, -longitud_num)
# Carga de librerías
library(dplyr)
library(ggcorrplot)
library(MASS)
# 1. Preparación de datos: factores y transformaciones logarítmicas
df2_trans <- df %>%
rename_all(tolower) %>%
mutate(
across(where(is.character), as.factor),
log_venta_promedio = log1p(venta_promedio),
log_dist_cerca    = log1p(dist_cerca)
) %>%
select(-tienda_id, -latitud_num, -longitud_num)
library(dplyr)
library(ggcorrplot)
# Preparamos df2: convertimos caracteres a factores, creamos log_dist_cerca y conservamos dist_se
df2_trans <- df %>%
rename_all(tolower) %>%
mutate(
across(where(is.character), as.factor),
log_dist_cerca = log1p(dist_cerca)
) %>%
select(-tienda_id, -latitud_num, -longitud_num)
library(dplyr)
library(ggcorrplot)
# Preparamos df2: convertimos caracteres a factores, creamos log_dist_cerca y conservamos dist_se
df2_trans <- df %>%
rename_all(tolower) %>%
mutate(
across(where(is.character), as.factor),
log_dist_cerca = log1p(dist_cerca)
) %>%
select(-tienda_id, -latitud_num, -longitud_num)
library(dplyr)
library(tidyr)
library(caret)
library(xgboost)
library(lightgbm)
library(randomForest)
library(rpart)
library(nnet)
library(ggplot2)
library(reshape2)
library(e1071)
library(ggcorrplot)
library(skimr)
library(DataExplorer)
library(naniar)
library(janitor)
library(GGally)
library(themis)
library(MLmetrics)
library(sf)
library(gridExtra)
library(broom)
library(themis)
library(recipes)
library(xgboost)
library(caret)
library(MLmetrics)
df <- read.csv("oxxo_tiendas_ext.csv", stringsAsFactors = FALSE)
miss_var_summary(df) %>%
arrange(desc(pct_miss)) %>%
print(n = nrow(.))
num_cols <- names(df)[sapply(df, is.numeric)]
for(col in num_cols){
ggplot(df, aes_string(x = col)) +
geom_histogram(bins = 30) +
theme_minimal() +
labs(title = paste("Histograma de", col)) -> p
print(p)
}
# 1) Leo y filtro ambas tablas
df <- read.csv("oxxo_tiendas_ext.csv", stringsAsFactors = FALSE) %>%
filter(!is.na(latitud_num), !is.na(longitud_num))
sev <- read.csv("7eleven_mty_tamps.csv", stringsAsFactors = FALSE) %>%
filter(!is.na(lat), !is.na(lng))
# 2) Cargo geosphere
library(geosphere)
# 3) Preparo matriz de coordenadas de los 7-Eleven
coords_sev <- sev %>% select(lng, lat)
# 1) Leo y filtro ambas tablas
df <- read.csv("oxxo_tiendas_ext.csv", stringsAsFactors = FALSE) %>%
filter(!is.na(latitud_num), !is.na(longitud_num))
sev <- read.csv("7eleven_mty_tamps.csv", stringsAsFactors = FALSE) %>%
filter(!is.na(lat), !is.na(lng))
# 2) Cargo geosphere
library(geosphere)
# 3) Preparo matriz de coordenadas de los 7-Eleven
coords_sev <- sev %>% select(lng, lat)
library(dplyr)
library(tidyr)
library(caret)
library(xgboost)
library(lightgbm)
library(randomForest)
library(rpart)
library(nnet)
library(ggplot2)
library(reshape2)
library(e1071)
library(ggcorrplot)
library(skimr)
library(DataExplorer)
library(naniar)
library(janitor)
library(GGally)
library(themis)
library(MLmetrics)
library(sf)
library(gridExtra)
library(broom)
library(themis)
library(recipes)
library(xgboost)
library(caret)
library(MLmetrics)
df <- read.csv("oxxo_tiendas_ext.csv", stringsAsFactors = FALSE)
miss_var_summary(df) %>%
arrange(desc(pct_miss)) %>%
print(n = nrow(.))
num_cols <- names(df)[sapply(df, is.numeric)]
for(col in num_cols){
ggplot(df, aes_string(x = col)) +
geom_histogram(bins = 30) +
theme_minimal() +
labs(title = paste("Histograma de", col)) -> p
print(p)
}
num_cols <- names(df)[sapply(df, is.numeric)]
plots <- lapply(num_cols, function(col) {
ggplot(df, aes_string(x = "1", y = col)) +
geom_boxplot() +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title=paste("Boxplot de", col))
})
for(i in seq(1, length(plots), by=4)){
grid.arrange(grobs=plots[i:min(i+3,length(plots))], ncol=4)
}
# 1) Leo y filtro ambas tablas
df <- read.csv("oxxo_tiendas_ext.csv", stringsAsFactors = FALSE) %>%
filter(!is.na(latitud_num), !is.na(longitud_num))
sev <- read.csv("7eleven_mty_tamps.csv", stringsAsFactors = FALSE) %>%
filter(!is.na(lat), !is.na(lng))
# 2) Cargo geosphere
library(geosphere)
# 3) Preparo matriz de coordenadas de los 7-Eleven
coords_sev <- sev %>% select(lng, lat)
View(df)
# 1) Leo y filtro ambas tablas
df <- read.csv("oxxo_tiendas_ext.csv", stringsAsFactors = FALSE) %>%
filter(!is.na(latitud_num), !is.na(longitud_num))
sev <- read.csv("7eleven_mty_tamps.csv", stringsAsFactors = FALSE) %>%
filter(!is.na(lat), !is.na(lng))
# 2) Cargo geosphere
library(geosphere)
# 3) Preparo matriz de coordenadas de los 7-Eleven
coords_sev <- sev %>% select(longitud_num, latitud_num)
View(df)
# Filtrar para no tener NA en coordenadas
df_geo  <- df  %>% filter(!is.na(latitud_num), !is.na(longitud_num))
sev_geo <- sev %>% filter(!is.na(lat), !is.na(lng))
# Preparar matriz de coordenadas de los 7-Eleven
coords_sev <- sev_geo %>% select(lng, lat)
# Filtrar para no tener NA en coordenadas
df_geo  <- df  %>% filter(!is.na(latitud_num), !is.na(longitud_num))
sev_geo <- sev %>% filter(!is.na(lat), !is.na(lng))
# Preparar matriz de coordenadas de los 7-Eleven
coords_sev <- sev_geo %>% select(lng, lat)
library(dplyr)
library(tidyr)
library(caret)
library(xgboost)
library(lightgbm)
library(randomForest)
library(rpart)
library(nnet)
library(ggplot2)
library(reshape2)
library(e1071)
library(ggcorrplot)
library(skimr)
library(DataExplorer)
library(naniar)
library(janitor)
library(GGally)
library(themis)
library(MLmetrics)
library(sf)
library(gridExtra)
library(broom)
library(themis)
library(recipes)
library(xgboost)
library(caret)
library(MLmetrics)
df <- read.csv("oxxo_tiendas_ext.csv", stringsAsFactors = FALSE)
miss_var_summary(df) %>%
arrange(desc(pct_miss)) %>%
print(n = nrow(.))
num_cols <- names(df)[sapply(df, is.numeric)]
for(col in num_cols){
ggplot(df, aes_string(x = col)) +
geom_histogram(bins = 30) +
theme_minimal() +
labs(title = paste("Histograma de", col)) -> p
print(p)
}
num_cols <- names(df)[sapply(df, is.numeric)]
plots <- lapply(num_cols, function(col) {
ggplot(df, aes_string(x = "1", y = col)) +
geom_boxplot() +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title=paste("Boxplot de", col))
})
for(i in seq(1, length(plots), by=4)){
grid.arrange(grobs=plots[i:min(i+3,length(plots))], ncol=4)
}
# Filtrar para no tener NA en coordenadas
df_geo  <- df  %>% filter(!is.na(latitud_num), !is.na(longitud_num))
sev_geo <- sev %>% filter(!is.na(lat), !is.na(lng))
# Preparar matriz de coordenadas de los 7-Eleven
coords_sev <- sev_geo %>% select(lng, lat)
# Carga de librerías
library(dplyr)
library(geosphere)
# Lectura de datos
df  <- read.csv("oxxo_tiendas_ext.csv", stringsAsFactors = FALSE)
sev <- read.csv("7eleven_mty_tamps.csv", stringsAsFactors = FALSE)
# 1. Filtrar filas con coordenadas válidas
df_geo  <- df  %>% filter(!is.na(latitud_num), !is.na(longitud_num))
sev_geo <- sev %>% filter(!if_all(everything(), is.na))
# 2. Encontrar dinámicamente los nombres de columnas de latitud/longitud en sev
lat_col <- grep("lat", names(sev_geo),        ignore.case = TRUE, value = TRUE)[1]
lng_col <- grep("lon|lng|long", names(sev_geo), ignore.case = TRUE, value = TRUE)[1]
# 3. Preparar matriz de coordenadas de los 7-Eleven usando esos nombres
coords_sev <- sev_geo %>%
select(
lng = all_of(lng_col),
lat = all_of(lat_col)
)
